utilizando o spring initializr definimos nosso projeto com a dependência spring 
web.

		O que é uma controller?

é um componente que temos. Serve para ser a camada entre a requisição e as demais
camadas. Basicamente, recebe a requisição do usuário.

Utilizamos um RestController para "Criar rotas":


@RestController
@RequestMapping("/primeirarota")
public class MinhaPrimeiraController {


    @GetMapping("/")
    public String primeiraMensagem() {
        return "Funcionou";
    }

}



para testes, criei uma classe que cria um modelo de user:

package br.com.willianctti.todolist.user;

public class UserModel {
    String username;    
    String name;    
    String password;    

}



criei tambéwm uma classe que faz a rota e utiliza o modelo de user:

@RestController
@RequestMapping("/users")
public class UserController {
    

    @PostMapping("/")
    public void create(@RequestBody UserModel usermodel) {
        System.out.println(usermodel.name);
    }
}


com um teste em post com a apidog podemos validar esse teste.





					Lombok

lib que ajuda a colocar geterrs, setters e etc.:


	<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.30</version>
			<scope>provided</scope>
		</dependency>



					h2


estrutura básica de um banco h2:

userModel:

  package br.com.willianctti.todolist.user;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import lombok.Data;

@Data
@Entity(name = "tb_users")
public class UserModel {
    @Id
    private Long id;


    private String username;    
    private String name;    
    private String password;   
    
  


}



a´pllication.properties: 

spring.datasource.url=jdbc:h2:mem:todolist
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=admin
spring.datasource.password=admin
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.datasource.driverClassName=org.h2.Driver









									Interface


uma interface é um modelo ou contrato que temos dentro da nossa aplicação. Temos os métodos mas
a implementação não. 

package br.com.willianctti.todolist.user;
import org.springframework.data.jpa.repository.JpaRepository;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
public interface IUserRepository extends JpaRepository<UserModel, Id>{ 
    
}




@RestController
@RequestMapping("/users")
public class UserController {
    
    @Autowired
    private IUserRepository userRepository;
    @PostMapping("/")
    public UserModel create(@RequestBody UserModel usermodel) {
        var userCreated = this.userRepository.save(usermodel);
        return userCreated;
    }




validações:

   @Column(unique = true)
    private String username;    
    private String name;    
    private String password;   




				criptografia 

usamos a lib bcrypt:

   @PostMapping("/")
    public UserModel create(@RequestBody UserModel usermodel) {

        var passwordHashed= BCrypt.withDefaults()
        .hashToString(12, usermodel.getPassword().toCharArray());

        usermodel.setPassword((passwordHashed));

        var userCreated = this.userRepository.save(usermodel);
        return userCreated;



			Criação de tabela tarefa:


package br.com.willianctti.todolist.task;

import java.time.LocalDateTime;
import java.util.UUID;

import org.hibernate.annotations.CreationTimestamp;

import jakarta.persistence.Id;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.IdClass;
import lombok.Data;


@Data
@Entity(name= "tb_tasks")
public class TaskModel {
    /**
     * Id
     * Usuário
     * Descrição
     * Título
     * Data de início
     * Data de término
     * Prioridade
     */

     @Id
     @GeneratedValue(generator = "UUID")
     private UUID id;
     private String description;
     @Column(length = 50)
     private String title;
     private LocalDateTime startAt;
     private LocalDateTime endAt;
     private String priority;
     private UUID idUser;

    @CreationTimestamp
     private LocalDateTime createdAt;


    




}


agora ja podemos cadastrar novas tarefas.

			controller de criação de task:

@RequestMapping("/tasks")
public class TaskController {

    @Autowired
    private ITaskRepository taskRepository;


    @PostMapping("/")
    public TaskModel create(@RequestBody TaskModel taskModel) {
        var task =  this.taskRepository.save(taskModel);
        return task;
    }

